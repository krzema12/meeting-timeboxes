{"version":3,"sources":["components/MeetingProgressBar.js","components/EditableAgenda.js","App.js","serviceWorker.js","index.js"],"names":["MeetingProgressBar","react_default","a","createElement","className","this","props","meetingParts","map","meetingPart","key","id","style","flexGrow","durationInMinutes","left","_calculateElapsedTimePercentage","elapsedTimeInMinutes","reduce","b","Component","EditableAgenda","_ref","onChange","type","value","name","e","target","parseInt","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","elapsedTimeInSeconds","timeCountingEnabled","src_components_MeetingProgressBar","src_components_EditableAgenda","_meetingPartChanged","bind","onClick","_startMeeting","meetingPartId","propertyName","newValue","indexOfMeetingPartToChange","findIndex","setState","_schedulePeriodicCurrentTimeMarkerUpdate","setInterval","_updateMarker","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b14939eb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './MeetingProgressBar.css';\n\nclass MeetingProgressBar extends Component {\n  render() {\n    return (\n      <div className=\"MeetingProgressBar\">\n        <ol>\n          {this.props.meetingParts.map(meetingPart =>\n            <li key={meetingPart.id} style={{flexGrow: meetingPart.durationInMinutes}}></li>\n          )}\n        </ol>\n        <div className=\"currentTimeIndicator\"\n            style={{left: this._calculateElapsedTimePercentage(\n              this.props.meetingParts, this.props.elapsedTimeInMinutes) + '%'}}>\n              now\n        </div>\n      </div>\n    );\n  }\n\n  _calculateElapsedTimePercentage(meetingParts, elapsedTimeInMinutes) {\n    const sumOfDurationsOfAllMeetingParts = meetingParts\n        .map(meetingPart => meetingPart.durationInMinutes)\n        .reduce((a, b) => a + b, 0);\n    return elapsedTimeInMinutes*100/sumOfDurationsOfAllMeetingParts;\n  }\n}\n\nexport default MeetingProgressBar;\n","import React from 'react';\nimport './EditableAgenda.css';\n\nconst EditableAgenda = ({meetingParts, onChange}) => (\n  <div className=\"EditableAgenda\">\n    <h2>Agenda</h2>\n    <form>\n      {meetingParts.map(meetingPart =>\n        <li key={meetingPart.id}>\n          <input\n              type=\"text\"\n              value={meetingPart.name}\n              onChange={e => onChange(meetingPart.id, 'name', e.target.value)} />\n          <input\n              type=\"number\"\n              value={meetingPart.durationInMinutes}\n              onChange={e => onChange(meetingPart.id, 'durationInMinutes', parseInt(e.target.value))} />\n        </li>\n      )}\n    </form>\n  </div>\n);\n\nexport default EditableAgenda;\n","import React, { Component } from 'react';\nimport MeetingProgressBar from './components/MeetingProgressBar';\nimport EditableAgenda from './components/EditableAgenda';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // TODO temporarily hardcoded\n      meetingParts: [\n        {\n          id: 0,\n          name: \"Some part\",\n          durationInMinutes: 30,\n        },\n        {\n          id: 1,\n          name: \"Very long part name and short duration\",\n          durationInMinutes: 5,\n        },\n        {\n          id: 2,\n          name: \"Some other part\",\n          durationInMinutes: 15,\n        },\n        {\n          id: 3,\n          name: \"Foobar\",\n          durationInMinutes: 10,\n        }\n      ],\n      // TODO temporarily hardcoded - will change as the time flows\n      elapsedTimeInSeconds: 0,\n      timeCountingEnabled: false,\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MeetingProgressBar\n            meetingParts={this.state.meetingParts}\n            elapsedTimeInMinutes={this.state.elapsedTimeInSeconds/60} />\n        <EditableAgenda\n            meetingParts={this.state.meetingParts}\n            onChange={this._meetingPartChanged.bind(this)} />\n            <input type=\"button\" value=\"Start meeting\" onClick={this._startMeeting.bind(this)} />\n      </div>\n    );\n  }\n\n  _meetingPartChanged(meetingPartId, propertyName, newValue) {\n    const indexOfMeetingPartToChange =\n      this.state.meetingParts.findIndex(meetingPart => {\n        return meetingPart.id === meetingPartId;\n      });\n    this.state.meetingParts[indexOfMeetingPartToChange][propertyName] = newValue;\n    // TODO do not mutate state directly. I'll probably use Redux.\n    this.setState(this.state);\n  }\n\n  _startMeeting() {\n    if (this.state.timeCountingEnabled === false) {\n      this._schedulePeriodicCurrentTimeMarkerUpdate();\n    }\n    this.setState({ timeCountingEnabled: true });\n  }\n\n  _schedulePeriodicCurrentTimeMarkerUpdate() {\n    setInterval(this._updateMarker.bind(this), 1000);\n  }\n\n  _updateMarker() {\n    this.setState({ elapsedTimeInSeconds: this.state.elapsedTimeInSeconds + 1 });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}